import { NextRequest, NextResponse } from 'next/server';
import { Uploader } from '@irys/upload';
import { Ethereum } from '@irys/upload-ethereum';

let uploaderInstance: any = null; // eslint-disable-line @typescript-eslint/no-explicit-any

const getIrysUploader = async () => {
  try {
    if (!uploaderInstance) {
      const privateKey = process.env.IRYS_PRIVATE_KEY;
      
      if (!privateKey) {
        throw new Error('IRYS_PRIVATE_KEY environment variable is not set');
      }

      console.log('Initializing Irys uploader with Ethereum network...');
      uploaderInstance = await Uploader(Ethereum).withWallet(privateKey);
      console.log('Irys uploader initialized successfully');
    }
    
    return uploaderInstance;
  } catch (error) {
    console.error('Failed to initialize Irys uploader:', error);
    throw error;
  }
};

export async function POST(request: NextRequest) {
  try {
    const { htmlContent } = await request.json();
    
    if (!htmlContent || htmlContent.trim().length === 0) {
      return NextResponse.json(
        { success: false, error: 'No HTML content provided for upload' },
        { status: 400 }
      );
    }
    
    console.log('Starting upload to Irys testnet...');
    
    const irysUploader = await getIrysUploader();
    
    // Add metadata tags for the HTML content
    const tags = [
      { name: 'Content-Type', value: 'text/html' },
      { name: 'Application', value: 'Iryscode' },
      { name: 'Version', value: '1.0' },
      { name: 'Timestamp', value: new Date().toISOString() },
      { name: 'Description', value: 'HTML website generated by Iryscode AI' }
    ];
    
    console.log('Uploading HTML content with metadata tags:', tags);
    
    // Upload the HTML content with tags
    const receipt = await irysUploader.upload(htmlContent, { tags });
    
    const transactionId = receipt.id;
    const gatewayUrl = `https://gateway.irys.xyz/${transactionId}`;
    const explorerUrl = `https://testnet-explorer.irys.xyz/tx/${transactionId}`;
    
    console.log('Upload successful!');
    console.log('Transaction ID:', transactionId);
    console.log('Gateway URL:', gatewayUrl);
    console.log('Explorer URL:', explorerUrl);
    
    return NextResponse.json({
      success: true,
      transactionId,
      gatewayUrl,
      explorerUrl
    });
    
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    console.error('Failed to upload to Irys:', error);
    console.error('Error details:', {
      message: errorMessage,
      stack: error instanceof Error ? error.stack : undefined
    });
    
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: 500 }
    );
  }
}